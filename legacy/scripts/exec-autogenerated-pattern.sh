#!/bin/bash

##############################################
### Function to generate the url used by autogenerated ingress objects
### Given a router pattern, it will create the required domains
##############################################
function routerPattern2DomainGenerator {
    ROUTER_URL=${1}
    SERVICE=${2}
    PROJECT=${3}
    ENVIRONMENT=${4}

    HAS_SERVICE_PATTERN=false

    re='(.*)\$\{service\}(.*)'
    if [[ $ROUTER_URL =~ $re ]]; then
        HAS_SERVICE_PATTERN=true
        ROUTER_URL2=${BASH_REMATCH[1]}${SERVICE}
        ROUTER_URL=${ROUTER_URL2}${BASH_REMATCH[2]}
    fi

    re='(.*)\$\{project\}(.*)'
    if [[ $ROUTER_URL =~ $re ]]; then
        ROUTER_URL2=${BASH_REMATCH[1]}${PROJECT}
        ROUTER_URL=${ROUTER_URL2}${BASH_REMATCH[2]}
    fi

    re='(.*)\$\{environment\}(.*)'
    SUFFIX=""
    if [[ $ROUTER_URL =~ $re ]]; then
        ROUTER_URL2=${BASH_REMATCH[1]}${ENVIRONMENT}
        ROUTER_URL=${ROUTER_URL2}${BASH_REMATCH[2]}
        SUFFIX=${BASH_REMATCH[2]}
    fi

    # fallback to the default behaviour which adds the service with a dot
    # if the pattern doesn't have a service pattern defined in it
    if [ $HAS_SERVICE_PATTERN == "false" ]; then
        ROUTER_URL2=${SERVICE}.${ROUTER_URL2}
    fi

    SUFFIX_HASH=$(echo $ROUTER_URL2 | sha256sum | awk '{print $1}' | cut -c -8)
    re='(.*)([.])(.*)'
    if [[ $ROUTER_URL2 =~ $re ]]; then
        if [ ${#BASH_REMATCH[3]} -gt 63 ]; then

            ROUTER_URL2=$(echo ${BASH_REMATCH[3]} | cut -c -55 | sed -e 's/-$//')-${SUFFIX_HASH}
            ROUTER_URL2=${BASH_REMATCH[1]}.${ROUTER_URL2}
            echo $ROUTER_URL2$SUFFIX
            return
        fi
        echo $ROUTER_URL2$SUFFIX
    else
        if [ ${#ROUTER_URL2} -gt 63 ]; then
            ROUTER_URL2=$(echo $ROUTER_URL2 | cut -c -55 | sed -e 's/-$//')-${SUFFIX_HASH}
        fi
        echo $ROUTER_URL2$SUFFIX
    fi
}

##############################################
### Function to generate the short url used by some ingress objects
### Performs the same function that the build-deploy controller currently does
##############################################
function generateShortUrl {
    ROUTER_URL=${1}
    SERVICE=${2}
    PROJECT=${3}
    ENVIRONMENT=${4}

    HAS_SERVICE_PATTERN=false

    re='(.*)\$\{service\}(.*)'
    if [[ $ROUTER_URL =~ $re ]]; then
        HAS_SERVICE_PATTERN=true
        ROUTER_URL2=${BASH_REMATCH[1]}${SERVICE}
        ROUTER_URL=${ROUTER_URL2}${BASH_REMATCH[2]}
    fi

    re='(.*)\$\{project\}(.*)'
    if [[ $ROUTER_URL =~ $re ]]; then
        SHA256_B32_PROJECT=$(echo -e "import sys\nimport base64\nimport hashlib\nprint(base64.b32encode(bytearray(hashlib.sha256(sys.argv[1].encode()).digest())).decode('utf-8'))" | python3 -  "${PROJECT}" | tr '[:upper:]' '[:lower:]' | cut -c -8)
        ROUTER_URL2=${BASH_REMATCH[1]}${SHA256_B32_PROJECT}
        ROUTER_URL=${ROUTER_URL2}${BASH_REMATCH[2]}
    fi

    re='(.*)\$\{environment\}(.*)'
    if [[ $ROUTER_URL =~ $re ]]; then
        SHA256_B32_ENVIRONMENT=$(echo -e "import sys\nimport base64\nimport hashlib\nprint(base64.b32encode(bytearray(hashlib.sha256(sys.argv[1].encode()).digest())).decode('utf-8'))" | python3 -  "${ENVIRONMENT}" | tr '[:upper:]' '[:lower:]' | cut -c -8)
        ROUTER_URL2=${BASH_REMATCH[1]}${SHA256_B32_ENVIRONMENT}
        ROUTER_URL=${ROUTER_URL2}${BASH_REMATCH[2]}
    fi

    # fallback to the default behaviour which adds the service with a dot
    # if the pattern doesn't have a service pattern defined in it
    if [ $HAS_SERVICE_PATTERN == "false" ]; then
        ROUTER_URL=${SERVICE}.${ROUTER_URL}
    fi

    echo $ROUTER_URL
}