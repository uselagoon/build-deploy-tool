package generator

import (
	"encoding/json"
	"reflect"
	"testing"
	"time"

	composetypes "github.com/compose-spec/compose-go/types"
	"github.com/uselagoon/build-deploy-tool/internal/dbaasclient"
	"github.com/uselagoon/build-deploy-tool/internal/helpers"
	"github.com/uselagoon/build-deploy-tool/internal/lagoon"
)

func Test_composeToServiceValues(t *testing.T) {
	type args struct {
		buildValues          *BuildValues
		composeService       string
		composeServiceValues composetypes.ServiceConfig
	}
	tests := []struct {
		name    string
		args    args
		want    *ServiceValues
		wantErr bool
	}{
		{
			name: "test1",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-main",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "main",
					Branch:               "main",
					BuildType:            "branch",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					LagoonYAML: lagoon.YAML{
						Environments: lagoon.Environments{
							"main": lagoon.Environment{},
						},
					},
				},
				composeService: "nginx",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "nginx",
					},
					Build: &composetypes.BuildConfig{
						Context:    ".",
						Dockerfile: "../testdata/basic/docker/basic.dockerfile",
					},
				},
			},
			want: &ServiceValues{
				Name:                       "nginx",
				OverrideName:               "nginx",
				Type:                       "nginx",
				AutogeneratedRoutesEnabled: true,
				AutogeneratedRoutesTLSAcme: true,
				InPodCronjobs:              []lagoon.Cronjob{},
				NativeCronjobs:             []lagoon.Cronjob{},
				ImageBuild: &ImageBuild{
					TemporaryImage: "example-project-main-nginx",
					Context:        ".",
					DockerFile:     "../testdata/basic/docker/basic.dockerfile",
					BuildImage:     "harbor.example/example-project/main/nginx:latest",
				},
			},
		},
		{
			name: "test2 - override name",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-main",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "main",
					Branch:               "main",
					BuildType:            "branch",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					LagoonYAML: lagoon.YAML{
						Environments: lagoon.Environments{
							"main": lagoon.Environment{},
						},
					},
				},
				composeService: "nginx",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "nginx",
						"lagoon.name": "nginx-php",
					},
					Build: &composetypes.BuildConfig{
						Context:    ".",
						Dockerfile: "../testdata/basic/docker/basic.dockerfile",
					},
				},
			},
			want: &ServiceValues{
				Name:                       "nginx",
				OverrideName:               "nginx-php",
				Type:                       "nginx",
				AutogeneratedRoutesEnabled: true,
				AutogeneratedRoutesTLSAcme: true,
				InPodCronjobs:              []lagoon.Cronjob{},
				NativeCronjobs:             []lagoon.Cronjob{},
				ImageBuild: &ImageBuild{
					TemporaryImage: "example-project-main-nginx",
					Context:        ".",
					DockerFile:     "../testdata/basic/docker/basic.dockerfile",
					BuildImage:     "harbor.example/example-project/main/nginx:latest",
				},
			},
		},
		{
			name: "test3a - lagoon.yml type override",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-main",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "main",
					Branch:               "main",
					BuildType:            "branch",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					LagoonYAML: lagoon.YAML{
						Environments: lagoon.Environments{
							"main": lagoon.Environment{
								Types: map[string]string{
									"nginx": "nginx-php-persistent",
								},
							},
						},
					},
				},
				composeService: "nginx",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type":       "nginx-php",
						"lagoon.persistent": "/app/docroot/sites/default/files/",
					},
					Build: &composetypes.BuildConfig{
						Context:    ".",
						Dockerfile: "../testdata/basic/docker/basic.dockerfile",
					},
				},
			},
			want: &ServiceValues{
				Name:                       "nginx",
				OverrideName:               "nginx",
				Type:                       "nginx-php-persistent",
				AutogeneratedRoutesEnabled: true,
				AutogeneratedRoutesTLSAcme: true,
				InPodCronjobs:              []lagoon.Cronjob{},
				NativeCronjobs:             []lagoon.Cronjob{},
				PersistentVolumeSize:       "5Gi",
				ImageBuild: &ImageBuild{
					TemporaryImage: "example-project-main-nginx",
					Context:        ".",
					DockerFile:     "../testdata/basic/docker/basic.dockerfile",
					BuildImage:     "harbor.example/example-project/main/nginx:latest",
				},
				PersistentVolumeName: "nginx",
				PersistentVolumePath: "/app/docroot/sites/default/files/",
				BackupsEnabled:       true,
			},
		},
		{
			name: "test3b - lagoon.yml type override with missing labels should get error",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-main",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "main",
					Branch:               "main",
					BuildType:            "branch",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					LagoonYAML: lagoon.YAML{
						Environments: lagoon.Environments{
							"main": lagoon.Environment{
								Types: map[string]string{
									"nginx": "nginx-php-persistent",
								},
							},
						},
					},
				},
				composeService: "nginx",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "nginx-php",
					},
					Build: &composetypes.BuildConfig{
						Context:    ".",
						Dockerfile: "../testdata/basic/docker/basic.dockerfile",
					},
				},
			},
			wantErr: true,
		},
		{
			name: "test4 - variable servicetypes type override",
			args: args{
				buildValues: &BuildValues{
					Namespace:     "example-project-main",
					Project:       "example-project",
					ImageRegistry: "harbor.example",
					Environment:   "main",
					Branch:        "main",
					BuildType:     "branch",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{
						Name:  "LAGOON_SERVICE_TYPES",
						Value: "nginx:nginx-php-persistent,mariadb:mariadb-dbaas",
					},
					LagoonYAML: lagoon.YAML{
						Environments: lagoon.Environments{
							"main": lagoon.Environment{},
						},
					},
				},
				composeService: "nginx",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "nginx-php",
					},
					Build: &composetypes.BuildConfig{
						Context:    ".",
						Dockerfile: "../testdata/basic/docker/basic.dockerfile",
					},
				},
			},
			want: &ServiceValues{
				Name:                       "nginx",
				OverrideName:               "nginx",
				Type:                       "nginx-php-persistent",
				AutogeneratedRoutesEnabled: true,
				AutogeneratedRoutesTLSAcme: true,
				InPodCronjobs:              []lagoon.Cronjob{},
				NativeCronjobs:             []lagoon.Cronjob{},
				ImageBuild: &ImageBuild{
					TemporaryImage: "example-project-main-nginx",
					Context:        ".",
					DockerFile:     "../testdata/basic/docker/basic.dockerfile",
					BuildImage:     "harbor.example/example-project/main/nginx:latest",
				},
				BackupsEnabled: true,
			},
		},
		{
			name: "test5 - additional labels",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-main",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "main",
					Branch:               "main",
					BuildType:            "branch",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					LagoonYAML: lagoon.YAML{
						Environments: lagoon.Environments{
							"main": lagoon.Environment{},
						},
					},
				},
				composeService: "nginx",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type":                        "nginx",
						"lagoon.autogeneratedroute":          "false",
						"lagoon.autogeneratedroute.tls-acme": "false",
					},
					Build: &composetypes.BuildConfig{
						Context:    ".",
						Dockerfile: "../testdata/basic/docker/basic.dockerfile",
					},
				},
			},
			want: &ServiceValues{
				Name:                       "nginx",
				OverrideName:               "nginx",
				Type:                       "nginx",
				AutogeneratedRoutesEnabled: false,
				AutogeneratedRoutesTLSAcme: false,
				InPodCronjobs:              []lagoon.Cronjob{},
				NativeCronjobs:             []lagoon.Cronjob{},
				ImageBuild: &ImageBuild{
					TemporaryImage: "example-project-main-nginx",
					Context:        ".",
					DockerFile:     "../testdata/basic/docker/basic.dockerfile",
					BuildImage:     "harbor.example/example-project/main/nginx:latest",
				},
			},
		},
		{
			name: "test6 - lagoon.yml additional fields",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-main",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "main",
					Branch:               "main",
					BuildType:            "branch",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					LagoonYAML: lagoon.YAML{
						Routes: lagoon.Routes{
							Autogenerate: lagoon.Autogenerate{
								Enabled: helpers.BoolPtr(false),
							},
						},
						Environments: lagoon.Environments{
							"main": lagoon.Environment{
								AutogenerateRoutes: helpers.BoolPtr(true),
							},
						},
					},
				},
				composeService: "nginx",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "nginx-php",
					},
					Build: &composetypes.BuildConfig{
						Context:    ".",
						Dockerfile: "../testdata/basic/docker/basic.dockerfile",
					},
				},
			},
			want: &ServiceValues{
				Name:                       "nginx",
				OverrideName:               "nginx",
				Type:                       "nginx-php",
				AutogeneratedRoutesEnabled: true,
				AutogeneratedRoutesTLSAcme: true,
				InPodCronjobs:              []lagoon.Cronjob{},
				NativeCronjobs:             []lagoon.Cronjob{},
				ImageBuild: &ImageBuild{
					TemporaryImage: "example-project-main-nginx",
					Context:        ".",
					DockerFile:     "../testdata/basic/docker/basic.dockerfile",
					BuildImage:     "harbor.example/example-project/main/nginx:latest",
				},
			},
		},
		{
			name: "test7 - lagoon.yml additional fields pullrequest",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-pr-123",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "pr-123",
					Branch:               "pr-123",
					BuildType:            "pullrequest",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					LagoonYAML: lagoon.YAML{
						Routes: lagoon.Routes{
							Autogenerate: lagoon.Autogenerate{
								Enabled:           helpers.BoolPtr(true),
								AllowPullRequests: helpers.BoolPtr(false),
							},
						},
						Environments: lagoon.Environments{
							"main": lagoon.Environment{
								AutogenerateRoutes: helpers.BoolPtr(true),
							},
						},
					},
				},
				composeService: "nginx",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "nginx-php",
					},
					Build: &composetypes.BuildConfig{
						Context:    ".",
						Dockerfile: "../testdata/basic/docker/basic.dockerfile",
					},
				},
			},
			want: &ServiceValues{
				Name:                       "nginx",
				OverrideName:               "nginx",
				Type:                       "nginx-php",
				AutogeneratedRoutesEnabled: false,
				AutogeneratedRoutesTLSAcme: true,
				InPodCronjobs:              []lagoon.Cronjob{},
				NativeCronjobs:             []lagoon.Cronjob{},
				ImageBuild: &ImageBuild{
					TemporaryImage: "example-project-pr-123-nginx",
					Context:        ".",
					DockerFile:     "../testdata/basic/docker/basic.dockerfile",
					BuildImage:     "harbor.example/example-project/pr-123/nginx:latest",
				},
			},
		},
		{
			name: "test8 - no labels, no service",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-pr-123",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "pr-123",
					Branch:               "pr-123",
					BuildType:            "pullrequest",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					LagoonYAML: lagoon.YAML{
						Routes: lagoon.Routes{
							Autogenerate: lagoon.Autogenerate{
								Enabled:           helpers.BoolPtr(true),
								AllowPullRequests: helpers.BoolPtr(false),
							},
						},
						Environments: lagoon.Environments{
							"main": lagoon.Environment{
								AutogenerateRoutes: helpers.BoolPtr(true),
							},
						},
					},
				},
				composeService:       "nginx",
				composeServiceValues: composetypes.ServiceConfig{},
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "test9 - type none, no service",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-pr-123",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "pr-123",
					Branch:               "pr-123",
					BuildType:            "pullrequest",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					LagoonYAML: lagoon.YAML{
						Routes: lagoon.Routes{
							Autogenerate: lagoon.Autogenerate{
								Enabled:           helpers.BoolPtr(true),
								AllowPullRequests: helpers.BoolPtr(false),
							},
						},
						Environments: lagoon.Environments{
							"main": lagoon.Environment{
								AutogenerateRoutes: helpers.BoolPtr(true),
							},
						},
					},
				},
				composeService: "nginx",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "none",
					},
					Build: &composetypes.BuildConfig{
						Context:    ".",
						Dockerfile: "../testdata/basic/docker/basic.dockerfile",
					},
				},
			},
			want: nil,
		},
		{
			name: "test10 - mariadb to mariadb-dbaas",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-main",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "main",
					Branch:               "main",
					BuildType:            "branch",
					EnvironmentType:      "development",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					LagoonYAML: lagoon.YAML{
						Routes: lagoon.Routes{
							Autogenerate: lagoon.Autogenerate{
								Enabled:           helpers.BoolPtr(true),
								AllowPullRequests: helpers.BoolPtr(false),
							},
						},
						Environments: lagoon.Environments{
							"main": lagoon.Environment{
								AutogenerateRoutes: helpers.BoolPtr(true),
							},
						},
					},
				},
				composeService: "mariadb",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "mariadb",
					},
					Image: "uselagoon/fake-mariadb:latest",
				},
			},
			want: &ServiceValues{
				Name:                       "mariadb",
				OverrideName:               "mariadb",
				Type:                       "mariadb-dbaas",
				AutogeneratedRoutesEnabled: false,
				AutogeneratedRoutesTLSAcme: false,
				DBaaSEnvironment:           "development",
				InPodCronjobs:              []lagoon.Cronjob{},
				NativeCronjobs:             []lagoon.Cronjob{},
				IsDBaaS:                    true,
				BackupsEnabled:             true,
			},
		},
		{
			//@TODO: this should FAIL in the future https://github.com/uselagoon/build-deploy-tool/issues/56
			name: "test11 - mariadb to mariadb-single via environment override with no patching db provider",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-main",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "main",
					Branch:               "main",
					BuildType:            "branch",
					EnvironmentType:      "development",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					DBaaSEnvironmentTypeOverrides: &lagoon.EnvironmentVariable{
						Name:  "LAGOON_DBAAS_ENVIRONMENT_TYPES",
						Value: "mariadb:development2,postgres:postgres-single",
					},
					LagoonYAML: lagoon.YAML{
						Routes: lagoon.Routes{
							Autogenerate: lagoon.Autogenerate{
								Enabled:           helpers.BoolPtr(true),
								AllowPullRequests: helpers.BoolPtr(false),
							},
						},
						Environments: lagoon.Environments{
							"main": lagoon.Environment{
								AutogenerateRoutes: helpers.BoolPtr(true),
							},
						},
					},
				},
				composeService: "mariadb",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "mariadb",
					},
					Image: "uselagoon/fake-mariadb:latest",
				},
			},
			want: &ServiceValues{
				Name:                       "mariadb",
				OverrideName:               "mariadb",
				Type:                       "mariadb-single",
				AutogeneratedRoutesEnabled: false,
				AutogeneratedRoutesTLSAcme: false,
				DBaaSEnvironment:           "development2",
				InPodCronjobs:              []lagoon.Cronjob{},
				NativeCronjobs:             []lagoon.Cronjob{},
				ImageBuild: &ImageBuild{
					PullImage:  "uselagoon/fake-mariadb:latest",
					BuildImage: "harbor.example/example-project/main/mariadb:latest",
				},
				BackupsEnabled: true,
				IsSingle:       true,
			},
		},
		{
			name: "test12 - postgres to postgres-dbaas",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-main",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "main",
					Branch:               "main",
					BuildType:            "branch",
					EnvironmentType:      "development",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					LagoonYAML: lagoon.YAML{
						Routes: lagoon.Routes{
							Autogenerate: lagoon.Autogenerate{
								Enabled:           helpers.BoolPtr(true),
								AllowPullRequests: helpers.BoolPtr(false),
							},
						},
						Environments: lagoon.Environments{
							"main": lagoon.Environment{
								AutogenerateRoutes: helpers.BoolPtr(true),
							},
						},
					},
				},
				composeService: "postgres",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "postgres",
					},
					Image: "uselagoon/fake-postgres:latest",
				},
			},
			want: &ServiceValues{
				Name:                       "postgres",
				OverrideName:               "postgres",
				Type:                       "postgres-dbaas",
				AutogeneratedRoutesEnabled: false,
				AutogeneratedRoutesTLSAcme: false,
				DBaaSEnvironment:           "development",
				InPodCronjobs:              []lagoon.Cronjob{},
				NativeCronjobs:             []lagoon.Cronjob{},
				IsDBaaS:                    true,
				BackupsEnabled:             true,
			},
		},
		{
			name: "test13 - ckandatapusher should be python",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-main",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "main",
					Branch:               "main",
					BuildType:            "branch",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					LagoonYAML: lagoon.YAML{
						Environments: lagoon.Environments{
							"main": lagoon.Environment{},
						},
					},
				},
				composeService: "python-ckan",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "python-ckandatapusher",
					},
					Build: &composetypes.BuildConfig{
						Context:    ".",
						Dockerfile: "../testdata/basic/docker/basic.dockerfile",
					},
				},
			},
			want: &ServiceValues{
				Name:                       "python-ckan",
				OverrideName:               "python-ckan",
				Type:                       "python",
				AutogeneratedRoutesEnabled: true,
				AutogeneratedRoutesTLSAcme: true,
				InPodCronjobs:              []lagoon.Cronjob{},
				NativeCronjobs:             []lagoon.Cronjob{},
				ImageBuild: &ImageBuild{
					TemporaryImage: "example-project-main-python-ckan",
					Context:        ".",
					DockerFile:     "../testdata/basic/docker/basic.dockerfile",
					BuildImage:     "harbor.example/example-project/main/python-ckan:latest",
				},
			},
		},
		{
			name: "test14a - spot instances",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-main",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "main",
					EnvironmentType:      "production",
					Branch:               "main",
					BuildType:            "branch",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					EnvironmentVariables: []lagoon.EnvironmentVariable{
						{Name: "LAGOON_FEATURE_FLAG_SPOT_INSTANCE_PRODUCTION", Value: "enabled", Scope: "global"},
						{Name: "LAGOON_FEATURE_FLAG_SPOT_INSTANCE_DEVELOPMENT", Value: "enabled", Scope: "global"},
						{Name: "LAGOON_FEATURE_FLAG_SPOT_INSTANCE_PRODUCTION_TYPES", Value: "nginx:force,nginx-php-persistent,basic", Scope: "global"},
						{Name: "LAGOON_FEATURE_FLAG_SPOT_INSTANCE_DEVELOPMENT_TYPES", Value: "nginx,nginx-php-persistent,basic", Scope: "global"},
						{Name: "LAGOON_FEATURE_FLAG_SPOT_INSTANCE_PRODUCTION_CRONJOB_TYPES", Value: "nginx:force,nginx-php-persistent,basic", Scope: "global"},
						{Name: "LAGOON_FEATURE_FLAG_SPOT_INSTANCE_DEVELOPMENT_CRONJOB_TYPES", Value: "nginx,nginx-php-persistent,basic", Scope: "global"},
					},
					LagoonYAML: lagoon.YAML{
						Environments: lagoon.Environments{
							"main": lagoon.Environment{},
						},
					},
				},
				composeService: "nginx",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "nginx",
					},
					Build: &composetypes.BuildConfig{
						Context:    ".",
						Dockerfile: "../testdata/basic/docker/basic.dockerfile",
					},
				},
			},
			want: &ServiceValues{
				Name:                       "nginx",
				OverrideName:               "nginx",
				Type:                       "nginx",
				DBaaSEnvironment:           "production",
				AutogeneratedRoutesEnabled: true,
				AutogeneratedRoutesTLSAcme: true,
				UseSpotInstances:           true,
				CronjobUseSpotInstances:    true,
				ForceSpotInstances:         true,
				CronjobForceSpotInstances:  true,
				InPodCronjobs:              []lagoon.Cronjob{},
				NativeCronjobs:             []lagoon.Cronjob{},
				Replicas:                   2,
				ImageBuild: &ImageBuild{
					TemporaryImage: "example-project-main-nginx",
					Context:        ".",
					DockerFile:     "../testdata/basic/docker/basic.dockerfile",
					BuildImage:     "harbor.example/example-project/main/nginx:latest",
				},
			},
		},
		{
			name: "test14b - spot instance without force",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-main",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "main",
					EnvironmentType:      "production",
					Branch:               "main",
					BuildType:            "branch",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					EnvironmentVariables: []lagoon.EnvironmentVariable{
						{Name: "LAGOON_FEATURE_FLAG_SPOT_INSTANCE_PRODUCTION", Value: "enabled", Scope: "global"},
						{Name: "LAGOON_FEATURE_FLAG_SPOT_INSTANCE_DEVELOPMENT", Value: "enabled", Scope: "global"},
						{Name: "LAGOON_FEATURE_FLAG_SPOT_INSTANCE_PRODUCTION_TYPES", Value: "nginx,nginx-php-persistent,basic", Scope: "global"},
						{Name: "LAGOON_FEATURE_FLAG_SPOT_INSTANCE_DEVELOPMENT_TYPES", Value: "nginx,nginx-php-persistent,basic", Scope: "global"},
						{Name: "LAGOON_FEATURE_FLAG_SPOT_INSTANCE_PRODUCTION_CRONJOB_TYPES", Value: "nginx,nginx-php-persistent,basic", Scope: "global"},
						{Name: "LAGOON_FEATURE_FLAG_SPOT_INSTANCE_DEVELOPMENT_CRONJOB_TYPES", Value: "nginx,nginx-php-persistent,basic", Scope: "global"},
					},
					LagoonYAML: lagoon.YAML{
						Environments: lagoon.Environments{
							"main": lagoon.Environment{},
						},
					},
				},
				composeService: "nginx",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "nginx",
					},
					Build: &composetypes.BuildConfig{
						Context:    ".",
						Dockerfile: "../testdata/basic/docker/basic.dockerfile",
					},
				},
			},
			want: &ServiceValues{
				Name:                       "nginx",
				OverrideName:               "nginx",
				Type:                       "nginx",
				DBaaSEnvironment:           "production",
				AutogeneratedRoutesEnabled: true,
				AutogeneratedRoutesTLSAcme: true,
				UseSpotInstances:           true,
				CronjobUseSpotInstances:    true,
				ForceSpotInstances:         false,
				CronjobForceSpotInstances:  false,
				InPodCronjobs:              []lagoon.Cronjob{},
				NativeCronjobs:             []lagoon.Cronjob{},
				Replicas:                   2,
				ImageBuild: &ImageBuild{
					TemporaryImage: "example-project-main-nginx",
					Context:        ".",
					DockerFile:     "../testdata/basic/docker/basic.dockerfile",
					BuildImage:     "harbor.example/example-project/main/nginx:latest",
				},
			},
		},
		{
			name: "test15 - multiple service ports",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-main",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "main",
					EnvironmentType:      "production",
					Branch:               "main",
					BuildType:            "branch",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					LagoonYAML: lagoon.YAML{
						Environments: lagoon.Environments{
							"main": lagoon.Environment{},
						},
					},
				},
				composeService: "service-a",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type":                    "basic",
						"lagoon.service.usecomposeports": "true",
					},
					Ports: []composetypes.ServicePortConfig{
						{
							Target:   8181,
							Protocol: "tcp",
						},
					},
					Build: &composetypes.BuildConfig{
						Context:    ".",
						Dockerfile: "../testdata/basic/docker/basic.dockerfile",
					},
				},
			},
			want: &ServiceValues{
				Name:                       "service-a",
				OverrideName:               "service-a",
				Type:                       "basic",
				DBaaSEnvironment:           "production",
				AutogeneratedRoutesEnabled: true,
				AutogeneratedRoutesTLSAcme: true,
				InPodCronjobs:              []lagoon.Cronjob{},
				NativeCronjobs:             []lagoon.Cronjob{},
				AdditionalServicePorts: []AdditionalServicePort{
					{
						ServicePort: composetypes.ServicePortConfig{
							Target:   8181,
							Protocol: "tcp",
						},
						ServiceName:         "service-a-8181",
						ServiceOverrideName: "service-a",
					},
				},
				ImageBuild: &ImageBuild{
					TemporaryImage: "example-project-main-service-a",
					Context:        ".",
					DockerFile:     "../testdata/basic/docker/basic.dockerfile",
					BuildImage:     "harbor.example/example-project/main/service-a:latest",
				},
			},
		},
		{
			name: "test16 - cronjobs",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-main",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "main",
					Branch:               "main",
					BuildType:            "branch",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					LagoonYAML: lagoon.YAML{
						Environments: lagoon.Environments{
							"main": lagoon.Environment{
								Cronjobs: []lagoon.Cronjob{
									{
										Name:     "My Cronjob",
										Command:  "env",
										Service:  "cli",
										Schedule: "5 2 * * *",
									},
									{
										Name:     "My Cronjob2",
										Command:  "drush cron",
										Service:  "cli",
										Schedule: "*/5 * * * *",
									},
									{
										Name:     "My Cronjob that has a very very very long name",
										Command:  "drush cron",
										Service:  "cli",
										Schedule: "5 2 * * *",
									},
								},
							},
						},
					},
				},
				composeService: "cli",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "cli",
					},
					Build: &composetypes.BuildConfig{
						Context:    ".",
						Dockerfile: "../testdata/basic/docker/basic.dockerfile",
					},
				},
			},
			want: &ServiceValues{
				Name:                       "cli",
				OverrideName:               "cli",
				Type:                       "cli",
				AutogeneratedRoutesEnabled: false,
				AutogeneratedRoutesTLSAcme: false,
				InPodCronjobs: []lagoon.Cronjob{
					{
						Name:     "My Cronjob2",
						Service:  "cli",
						Schedule: "3,8,13,18,23,28,33,38,43,48,53,58 * * * *",
						Command:  "drush cron",
					},
				},
				NativeCronjobs: []lagoon.Cronjob{
					{
						Name:     "cronjob-cli-my-cronjob",
						Service:  "cli",
						Schedule: "5 2 * * *",
						Command:  "env",
					},
					{
						Name:     "cronjob-cli-my-cronjob-that-has-a-very-very-v-znwv36",
						Service:  "cli",
						Schedule: "5 2 * * *",
						Command:  "drush cron",
					},
				},
				ImageBuild: &ImageBuild{
					TemporaryImage: "example-project-main-cli",
					Context:        ".",
					DockerFile:     "../testdata/basic/docker/basic.dockerfile",
					BuildImage:     "harbor.example/example-project/main/cli:latest",
				},
			},
		},
		{
			name: "test17 - cronjobs disabled",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-main",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "main",
					Branch:               "main",
					BuildType:            "branch",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					CronjobsDisabled:     true,
					LagoonYAML: lagoon.YAML{
						Environments: lagoon.Environments{
							"main": lagoon.Environment{
								Cronjobs: []lagoon.Cronjob{
									{
										Name:     "My Cronjob",
										Command:  "env",
										Service:  "cli",
										Schedule: "5 2 * * *",
									},
									{
										Name:     "My Cronjob2",
										Command:  "drush cron",
										Service:  "cli",
										Schedule: "*/5 * * * *",
									},
								},
							},
						},
					},
				},
				composeService: "cli",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "cli",
					},
					Build: &composetypes.BuildConfig{
						Context:    ".",
						Dockerfile: "../testdata/basic/docker/basic.dockerfile",
					},
				},
			},
			want: &ServiceValues{
				Name:                       "cli",
				OverrideName:               "cli",
				Type:                       "cli",
				AutogeneratedRoutesEnabled: false,
				AutogeneratedRoutesTLSAcme: false,
				InPodCronjobs:              []lagoon.Cronjob{},
				NativeCronjobs:             []lagoon.Cronjob{},
				ImageBuild: &ImageBuild{
					TemporaryImage: "example-project-main-cli",
					Context:        ".",
					DockerFile:     "../testdata/basic/docker/basic.dockerfile",
					BuildImage:     "harbor.example/example-project/main/cli:latest",
				},
			},
		},
		{
			name: "test18 - invalid service port",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-main",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "main",
					Branch:               "main",
					BuildType:            "branch",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					LagoonYAML: lagoon.YAML{
						Environments: lagoon.Environments{
							"main": lagoon.Environment{},
						},
					},
				},
				composeService: "basic",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type":         "basic",
						"lagoon.service.port": "32a12",
					},
					Build: &composetypes.BuildConfig{
						Context:    ".",
						Dockerfile: "../testdata/basic/docker/basic.dockerfile",
					},
				},
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "test19 - duplicate cronjobs",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-main",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "main",
					Branch:               "main",
					BuildType:            "branch",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					LagoonYAML: lagoon.YAML{
						Environments: lagoon.Environments{
							"main": lagoon.Environment{
								Cronjobs: []lagoon.Cronjob{
									{
										Name:     "My Cronjob",
										Command:  "env",
										Service:  "cli",
										Schedule: "5 2 * * *",
									},
									{
										Name:     "My Cronjob2",
										Command:  "drush cron",
										Service:  "cli",
										Schedule: "*/5 * * * *",
									},
									{
										Name:     "My Cronjob",
										Command:  "env",
										Service:  "cli",
										Schedule: "15 5 4 * 0",
									},
								},
							},
						},
					},
				},
				composeService: "cli",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "cli",
					},
					Build: &composetypes.BuildConfig{
						Context:    ".",
						Dockerfile: "../testdata/basic/docker/basic.dockerfile",
					},
				},
			},
			wantErr: true,
		},
		{
			name: "test20 - dockerfile build items",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-main",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "main",
					Branch:               "main",
					BuildType:            "branch",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					LagoonYAML: lagoon.YAML{
						Environments: lagoon.Environments{
							"main": lagoon.Environment{},
						},
					},
				},
				composeService: "redis",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "redis",
					},
					Image: "uselagoon/fake-redis:latest",
				},
			},
			want: &ServiceValues{
				Name:           "redis",
				OverrideName:   "redis",
				Type:           "redis",
				InPodCronjobs:  []lagoon.Cronjob{},
				NativeCronjobs: []lagoon.Cronjob{},
				ImageBuild: &ImageBuild{
					PullImage:  "uselagoon/fake-redis:latest",
					BuildImage: "harbor.example/example-project/main/redis:latest",
				},
			},
		},
		{
			name: "test21 - dockerfile build override from lagoon.yml",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-main",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "main",
					Branch:               "main",
					BuildType:            "branch",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					LagoonYAML: lagoon.YAML{
						Environments: lagoon.Environments{
							"main": lagoon.Environment{
								Overrides: map[string]lagoon.Override{
									"nginx": {
										Build: lagoon.Build{
											Dockerfile: "../testdata/basic/docker/basic.dockerfile",
										},
									},
								},
							},
						},
					},
				},
				composeService: "nginx",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "nginx",
					},
					Build: &composetypes.BuildConfig{
						Context:    ".",
						Dockerfile: "../testdata/basic/docker/basic.dockerfile", //intentionally wrong, override by lagoon.yml
					},
				},
			},
			want: &ServiceValues{
				Name:                       "nginx",
				OverrideName:               "nginx",
				Type:                       "nginx",
				AutogeneratedRoutesEnabled: true,
				AutogeneratedRoutesTLSAcme: true,
				InPodCronjobs:              []lagoon.Cronjob{},
				NativeCronjobs:             []lagoon.Cronjob{},
				ImageBuild: &ImageBuild{
					TemporaryImage: "example-project-main-nginx",
					Context:        ".",
					DockerFile:     "../testdata/basic/docker/basic.dockerfile",
					BuildImage:     "harbor.example/example-project/main/nginx:latest",
				},
			},
		},
		{
			name: "test22 - dockerfile image override from lagoon.yml",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-main",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "main",
					Branch:               "main",
					BuildType:            "branch",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					LagoonYAML: lagoon.YAML{
						Environments: lagoon.Environments{
							"main": lagoon.Environment{
								Overrides: map[string]lagoon.Override{
									"redis": {
										Image: "uselagoon/fake-redis:7",
									},
								},
							},
						},
					},
				},
				composeService: "redis",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "redis",
					},
					Image: "uselagoon/fake-redis:latest", //intentionally wrong, override by lagoon.yml
				},
			},
			want: &ServiceValues{
				Name:           "redis",
				OverrideName:   "redis",
				Type:           "redis",
				InPodCronjobs:  []lagoon.Cronjob{},
				NativeCronjobs: []lagoon.Cronjob{},
				ImageBuild: &ImageBuild{
					PullImage:  "uselagoon/fake-redis:7",
					BuildImage: "harbor.example/example-project/main/redis:latest",
				},
			},
		},
		{
			name: "test23 - failure on invalid baseimage label reference structure",
			args: args{
				buildValues: &BuildValues{
					Namespace:            "example-project-main",
					Project:              "example-project",
					ImageRegistry:        "harbor.example",
					Environment:          "main",
					Branch:               "main",
					BuildType:            "branch",
					ServiceTypeOverrides: &lagoon.EnvironmentVariable{},
					LagoonYAML: lagoon.YAML{
						Environments: lagoon.Environments{
							"main": lagoon.Environment{
								Overrides: map[string]lagoon.Override{
									"redis": {
										Image: "uselagoon/fake-redis:7",
									},
								},
							},
						},
					},
				},
				composeService: "redis",
				composeServiceValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type":       "redis",
						"lagoon.base.image": "this-is-an-invalid-reference!",
					},
					Image: "uselagoon/fake-redis:7",
				},
			},
			want:    nil,
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ts := dbaasclient.TestDBaaSHTTPServer()
			defer ts.Close()
			tt.args.buildValues.DBaaSOperatorEndpoint = ts.URL
			tt.args.buildValues.DBaaSClient = dbaasclient.NewClient(dbaasclient.Client{
				RetryMax:     5,
				RetryWaitMin: time.Duration(10) * time.Millisecond,
				RetryWaitMax: time.Duration(50) * time.Millisecond,
			})
			got, err := composeToServiceValues(tt.args.buildValues, tt.args.composeService, tt.args.composeServiceValues, false)
			if (err != nil) != tt.wantErr {
				t.Errorf("composeToServiceValues() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			lValues, _ := json.Marshal(got)
			wValues, _ := json.Marshal(tt.want)
			if !reflect.DeepEqual(string(lValues), string(wValues)) {
				t.Errorf("composeToServiceValues() = %v, want %v", string(lValues), string(wValues))
			}
		})
	}
}
