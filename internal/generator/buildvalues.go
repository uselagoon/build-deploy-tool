package generator

import (
	composetypes "github.com/compose-spec/compose-go/types"
	"github.com/uselagoon/build-deploy-tool/internal/dbaasclient"
	"github.com/uselagoon/build-deploy-tool/internal/lagoon"
	corev1 "k8s.io/api/core/v1"
)

const (
	DefaultImagePullSecret = "lagoon-internal-registry-secret"
)

// BuildValues is the values file data generated by the lagoon build
type BuildValues struct {
	SourceRepository              string                       `json:"sourceRepository" description:"the source repository for the project"`
	BuildName                     string                       `json:"buildName" description:"the name of the build"`
	Project                       string                       `json:"project" description:"the name of the project"`
	Environment                   string                       `json:"environment" description:"the name of the environment, this is the safe version and may differ from the branch name"`
	EnvironmentType               string                       `json:"environmentType" description:"the type of the environment, production or development"`
	Namespace                     string                       `json:"namespace" description:"the kubernetes namespace that this environment is built in"`
	GitSHA                        string                       `json:"gitSha" description:"the git sha of this particular build"`
	BuildType                     string                       `json:"buildType" description:"the type of build this is, branch, pullrequest, or promote"`
	Kubernetes                    string                       `json:"kubernetes" description:"the name of the cluster that this hosts this environment"`
	LagoonVersion                 string                       `json:"lagoonVersion" description:"the version of lagoon that started this build"`
	ActiveEnvironment             string                       `json:"activeEnvironment" activestandby:"true" description:"the current active environment"`
	StandbyEnvironment            string                       `json:"standbyEnvironment" activestandby:"true" description:"the current standby environment"`
	IsActiveEnvironment           bool                         `json:"isActiveEnvironment" activestandby:"true" description:"flag to determine if this environment is currently an active environment"`
	IsStandbyEnvironment          bool                         `json:"isStandbyEnvironment" activestandby:"true" description:"flag to determine if this environment is currently a standby environment"`
	PodSecurityContext            PodSecurityContext           `json:"podSecurityContext" description:"stores the podsecuritycontext overrides"`
	Branch                        string                       `json:"branch" buildtype:"branch" description:"the branch used for this environment"`
	PRNumber                      string                       `json:"prNumber" buildtype:"pullrequest" description:"pullrequest number"`
	PRTitle                       string                       `json:"prTitle" buildtype:"pullrequest" description:"title of the pullrequest"`
	PRHeadBranch                  string                       `json:"prHeadBranch" buildtype:"pullrequest" description:"head branch of the pullrequest"`
	PRBaseBranch                  string                       `json:"prBaseBranch" buildtype:"pullrequest" description:"base branch of the pullrequest"`
	PRHeadSHA                     string                       `json:"prHeadSHA" buildtype:"pullrequest" description:"head sha of the pullrequest"`
	PRBaseSHA                     string                       `json:"prBaseSHA" buildtype:"pullrequest" description:"base sha of the pullrequest"`
	PrivateRegistryURLS           []string                     `json:"privateRegistryURLS" description:"this stores all the private registry urls used by this environment"`
	Fastly                        Fastly                       `json:"fastly" deprecated:"true" description:"this is the configuration of fastly for this environment"`
	FastlyCacheNoCache            string                       `json:"fastlyCacheNoCahce" deprecated:"true" description:"this is the service id of a fastly cache-no-cache service"`
	FastlyAPISecretPrefix         string                       `json:"fastlyAPISecretPrefix" deprecated:"true" description:"this is the fastly-api-secret prefix to use"`
	ConfigMapSha                  string                       `json:"configMapSha" description:"this is the computed sha of the lagoon-env configmap, it is used to determine if changes are required to deployments"`
	Route                         string                       `json:"route" description:"this stores the primary determiend route after all have been calculated"`
	Routes                        []string                     `json:"routes" description:"this stores all routes after they are calculated"`
	AutogeneratedRoutes           []string                     `json:"autogeneratedRoutes" description:"this stores autogenerated routes after they are calculated"`
	AutogeneratedRoutesFastly     bool                         `json:"autogeneratedRoutesFastly" deprecated:"true" description:"the flag to determine if autogenerated routes should receive fastly annotations"`
	Services                      []ServiceValues              `json:"services" description:"stores all the computed values for all docker-compose services for this environment"`
	Backup                        BackupConfiguration          `json:"backup" description:"stores backup configuration"`
	Monitoring                    MonitoringConfig             `json:"monitoring" deprecated:"true" description:"stores monitoring configuration"`
	DBaaSOperatorEndpoint         string                       `json:"dbaasOperatorEndpoint" description:"the dbaas operator to use for provisioning a consumer"`
	ServiceTypeOverrides          *lagoon.EnvironmentVariable  `json:"serviceTypeOverrides" description:"stores any service type overrides"`
	DBaaSEnvironmentTypeOverrides *lagoon.EnvironmentVariable  `json:"dbaasEnvironmentTypeOverrides" description:"stores any dbaas type overrides"`
	DBaaSFallbackSingle           bool                         `json:"dbaasFallbackSingle" description:"the fallback flag to define if a single pod should be used if no provider is found"`
	IngressClass                  string                       `json:"ingressClass" description:"the ingress class used for this environment"`
	TaskScaleMaxIterations        int                          `json:"taskScaleMaxIterations" description:"the number of attempts to wait for pods to scale for pre and post rollout tasks"`
	TaskScaleWaitTime             int                          `json:"taskScaleWaitTime" description:"the time to wait for pods to scale for pre and post rollout tasks"`
	DynamicSecretMounts           []DynamicSecretMounts        `json:"dynamicSecretMounts" description:"stores any dynamic secret mount definitions"`
	DynamicSecretVolumes          []DynamicSecretVolumes       `json:"dynamicSecretVolumes" description:"stores any dynamic secret volume definitions"`
	DynamicDBaaSSecrets           []string                     `json:"dynamicDBaaSSecrets" description:"stores any dynamic dbaas secret definitions"`
	ImageCache                    string                       `json:"imageCache" description:"if an imagecache has been provided for images outside of the imageregistry"`
	DefaultBackupSchedule         string                       `json:"defaultBackupSchedule" description:"the default backup scheduled"`
	DBaaSClient                   *dbaasclient.Client          `json:"-" description:"used to store connection information for the dbaas operator endpoint"`
	ImageReferences               map[string]string            `json:"imageReferences" description:"the post image build phase storage location of images for this build"`
	Resources                     Resources                    `json:"resources" description:"this stores resource overrides for this environment"`
	CronjobsDisabled              bool                         `json:"cronjobsDisabled" description:"this controls whether cronjobs are enabled for this environment or not"`
	FeatureFlags                  map[string]bool              `json:"-" description:"these are used by templating systems to turn on or off certain functionality based on if feature flags are defined"`
	ImageRegistry                 string                       `json:"imageRegistry" description:"the image registry in use for this environment, usually harbor"`
	DockerBuildKit                bool                         `json:"dockerBuildKit" description:"the flag to determine if docker buildkit is used"`
	ImageBuildArguments           map[string]string            `json:"imageBuildArguments" description:"where the calculated image build arguments are stored"`
	EnvironmentVariables          []lagoon.EnvironmentVariable `json:"environmentVariables" description:"the merged project and environment variables for this environment"`
	LagoonYAML                    lagoon.YAML                  `json:"lagoonYAML" description:"the unmarshalled lagoon yaml file"`
	PromotionSourceEnvironment    string                       `json:"promotionSourceEnvironment" buildtype:"promote" description:"the promotion source environment to pull images from"`
	IsCI                          bool                         `json:"isCI" description:"this controls aspects of the environment or build depending on if a CI job"`
	RWX2RWO                       bool                         `json:"RWX2RWO" description:"this controls whether the ReadWriteMany to ReadWriteOnce override should be used"`
	IsolationNetworkPolicy        bool                         `json:"isolationNetworkPolicy" description:"this controls whether isolation network policies should be enabled"`
	ContainerRegistry             []ContainerRegistry          `json:"containerRegistry" description:"this contains any private container registries that may exist within the environment that need to be logged into"`
	RoutesAutogeneratePrefixes    []string                     `json:"routesAutogeneratePrefixes"`
	BackupsEnabled                bool                         `json:"backupsEnabled"`
	RouteQuota                    *int                         `json:"routeQuota"`
	ImageCacheBuildArguments      []ImageCacheBuildArguments   `json:"imageCacheBuildArgs"`
	IgnoreImageCache              bool                         `json:"ignoreImageCache"`
	SSHPrivateKey                 string                       `json:"sshPrivateKey"`
}

type Resources struct {
	Limits   ResourceLimits   `json:"limits"`
	Requests ResourceRequests `json:"requests"`
}

type ResourceLimits struct {
	Memory           string `json:"memory"`
	EphemeralStorage string `json:"ephemeral-storage"`
}

type ResourceRequests struct {
	EphemeralStorage string `json:"ephemeral-storage"`
}

type ContainerRegistry struct {
	Name           string `json:"name" description:"name of the registry collected from the .lagoon.yml file"`
	Username       string `json:"username" description:"the username to use to log in to the registry"`
	Password       string `json:"password" description:"the password or password variable reference to use to log in to the registry"`
	URL            string `json:"url" description:"the registry url"`
	UsernameSource string `json:"usernameSource" description:"information regarding the source of the username"`
	PasswordSource string `json:"passwordSource" description:"information regarding the source of the password"`
	SecretName     string `json:"secretName" description:"the name of the secret to be created for this registry"`
}

type PodSecurityContext struct {
	FsGroup        int64 `json:"fsGroup"`
	RunAsGroup     int64 `json:"runAsGroup"`
	RunAsUser      int64 `json:"runAsUser"`
	OnRootMismatch bool  `json:"onRootMismatch"`
}

type Fastly struct {
	ServiceID     string `json:"serviceId"`
	APISecretName string `json:"apiSecretName"`
	Watch         bool   `json:"watch"`
}

type MonitoringConfig struct {
	Enabled      bool   `json:"enabled"`
	AlertContact string `json:"alertContact"`
	StatusPageID string `json:"statusPageID"`
}

type DynamicSecretMounts struct {
	Name      string `json:"name"`
	MountPath string `json:"mountPath"`
	ReadOnly  bool   `json:"readOnly"`
}

type DynamicSecretVolumes struct {
	Name   string        `json:"name"`
	Secret DynamicSecret `json:"secret"`
}

type DynamicSecret struct {
	SecretName string `json:"secretName"`
	Optional   bool   `json:"optional"`
}

type ImageCacheBuildArguments struct {
	Image string `json:"image"`
	Name  string `json:"name"`
}

// ServiceValues is the values for a specific service used by a lagoon build
type ServiceValues struct {
	Name                                   string                  `json:"name"`         // the actual compose service name
	OverrideName                           string                  `json:"overrideName"` // if an override name is provided, use it
	Type                                   string                  `json:"type"`
	AutogeneratedRoutesEnabled             bool                    `json:"autogeneratedRoutesEnabled"`
	AutogeneratedRoutesTLSAcme             bool                    `json:"autogeneratedRoutesTLSAcme"`
	AutogeneratedRoutesRequestVerification bool                    `json:"autogeneratedRoutesRequestVerification"`
	AutogeneratedRouteDomain               string                  `json:"autogeneratedRouteDomain"`
	ShortAutogeneratedRouteDomain          string                  `json:"shortAutogeneratedRouteDomain"`
	DBaaSEnvironment                       string                  `json:"dbaasEnvironment"`
	NativeCronjobs                         []lagoon.Cronjob        `json:"nativeCronjobs"`
	InPodCronjobs                          []lagoon.Cronjob        `json:"inPodCronjobs"`
	DeploymentServiceType                  string                  `json:"deploymentServiceType"`
	ServicePort                            int32                   `json:"servicePort,omitempty"`
	PersistentVolumePath                   string                  `json:"persistentVolumePath,omitempty"`
	PersistentVolumeName                   string                  `json:"persistentVolumeName,omitempty"`
	PersistentVolumeSize                   string                  `json:"persistentVolumeSize,omitempty"`
	UseSpotInstances                       bool                    `json:"useSpot"`
	ForceSpotInstances                     bool                    `json:"forceUseSpot"`
	CronjobUseSpotInstances                bool                    `json:"cronjobUseSpot"`
	CronjobForceSpotInstances              bool                    `json:"cronjobForceUseSpot"`
	Replicas                               int32                   `json:"replicas"`
	LinkedService                          *ServiceValues          `json:"linkedService"`
	PodSecurityContext                     PodSecurityContext      `json:"podSecurityContext"`
	AdditionalServicePorts                 []AdditionalServicePort `json:"additionalServicePorts,omitempty"`
	NodeSelectors                          *map[string]string      `json:"nodeSelectors"`
	Tolerations                            *[]corev1.Toleration    `json:"tolerations"`
	Affinity                               *corev1.Affinity        `json:"affinity"`
	CronjobNodeSelectors                   *map[string]string      `json:"cronjobNodeSelectors"`
	CronjobTolerations                     *[]corev1.Toleration    `json:"cronjobTolerations"`
	CronjobAffinity                        *corev1.Affinity        `json:"cronjobAffinity"`
	DBaasReadReplica                       bool                    `json:"dBaasReadReplica"`
	ImageBuild                             *ImageBuild             `json:"docker,omitempty"`
	BackupsEnabled                         bool                    `json:"backupsEnabled"`
	IsDBaaS                                bool                    `json:"isDBaaS"`
	IsSingle                               bool                    `json:"isSingle"`
}

type ImageBuild struct {
	DockerFile     string `json:"dockerFile,omitempty"`
	Target         string `json:"target,omitempty"`
	Context        string `json:"context,omitempty"`
	PullImage      string `json:"pullImage,omitempty"`
	PromoteImage   string `json:"promoteImage,omitempty"`
	BuildImage     string `json:"buildImage,omitempty"`
	TemporaryImage string `json:"temporaryImage,omitempty"`
}

type AdditionalServicePort struct {
	ServicePort composetypes.ServicePortConfig `json:"servicePort,omitempty"`
	ServiceName string                         `json:"serviceName,omitempty"`
	Index       int                            `json:"-"`
}

// CronjobValues is the values for cronjobs
type CronjobValues struct {
	Schedule string `json:"schedule"`
	Command  string `json:"command"`
}

type BackupConfiguration struct {
	K8upVersion    string                      `json:"k8upVersion"`
	PruneRetention PruneRetention              `json:"pruneRetention"`
	PruneSchedule  string                      `json:"pruneSchedule"`
	CheckSchedule  string                      `json:"checkSchedule"`
	BackupSchedule string                      `json:"backupSchedule"`
	S3Endpoint     string                      `json:"s3Endpoint"`
	S3BucketName   string                      `json:"s3BucketName"`
	S3SecretName   string                      `json:"s3SecretName"`
	CustomLocation CustomBackupRestoreLocation `json:"customLocation"`
}

type CustomBackupRestoreLocation struct {
	BackupLocationAccessKey  string `json:"backupLocationAccessKey"`
	BackupLocationSecretKey  string `json:"backupLocationSecretKey"`
	RestoreLocationAccessKey string `json:"restoreLocationAccessKey"`
	RestoreLocationSecretKey string `json:"restoreLocationSecretKey"`
}

type PruneRetention struct {
	Hourly  int `json:"hourly"`
	Daily   int `json:"daily"`
	Weekly  int `json:"weekly"`
	Monthly int `json:"monthly"`
}
