package generator

import (
	"fmt"
	"strings"

	"github.com/uselagoon/build-deploy-tool/internal/helpers"
	"github.com/uselagoon/build-deploy-tool/internal/lagoon"
)

// this creates a bunch of standard environment variables that are injected into the `lagoon-env` configmap normally
func collectBuildVariables(buildValues BuildValues) []lagoon.EnvironmentVariable {
	vars := []lagoon.EnvironmentVariable{}
	vars = append(vars, lagoon.EnvironmentVariable{Name: "LAGOON_PROJECT", Value: buildValues.Project, Scope: "runtime"})
	vars = append(vars, lagoon.EnvironmentVariable{Name: "LAGOON_ENVIRONMENT", Value: buildValues.Environment, Scope: "runtime"})
	vars = append(vars, lagoon.EnvironmentVariable{Name: "LAGOON_ENVIRONMENT_TYPE", Value: buildValues.EnvironmentType, Scope: "runtime"})
	vars = append(vars, lagoon.EnvironmentVariable{Name: "LAGOON_GIT_SHA", Value: buildValues.GitSHA, Scope: "runtime"})
	vars = append(vars, lagoon.EnvironmentVariable{Name: "LAGOON_KUBERNETES", Value: buildValues.Kubernetes, Scope: "runtime"})
	vars = append(vars, lagoon.EnvironmentVariable{Name: "LAGOON_GIT_SAFE_BRANCH", Value: buildValues.Environment, Scope: "runtime"}) //deprecated??? (https://github.com/uselagoon/lagoon/blob/1053965321495213591f4c9110f90a9d9dcfc946/images/kubectl-build-deploy-dind/build-deploy-docker-compose.sh#L748)
	if buildValues.BuildType == "branch" {
		vars = append(vars, lagoon.EnvironmentVariable{Name: "LAGOON_GIT_BRANCH", Value: buildValues.Branch, Scope: "runtime"})
	}
	if buildValues.BuildType == "pullrequest" {
		vars = append(vars, lagoon.EnvironmentVariable{Name: "LAGOON_PR_HEAD_BRANCH", Value: buildValues.PRHeadBranch, Scope: "runtime"})
		vars = append(vars, lagoon.EnvironmentVariable{Name: "LAGOON_PR_BASE_BRANCH", Value: buildValues.PRBaseBranch, Scope: "runtime"})
		vars = append(vars, lagoon.EnvironmentVariable{Name: "LAGOON_PR_TITLE", Value: buildValues.PRTitle, Scope: "runtime"})
		vars = append(vars, lagoon.EnvironmentVariable{Name: "LAGOON_PR_NUMBER", Value: buildValues.PRNumber, Scope: "runtime"})
	}
	if buildValues.ActiveEnvironment != "" {
		vars = append(vars, lagoon.EnvironmentVariable{Name: "LAGOON_ACTIVE_ENVIRONMENT", Value: buildValues.ActiveEnvironment, Scope: "runtime"})
	}
	if buildValues.StandbyEnvironment != "" {
		vars = append(vars, lagoon.EnvironmentVariable{Name: "LAGOON_STANDBY_ENVIRONMENT", Value: buildValues.StandbyEnvironment, Scope: "runtime"})
	}
	vars = append(vars, lagoon.EnvironmentVariable{Name: "LAGOON_ROUTE", Value: buildValues.Route, Scope: "runtime"})
	vars = append(vars, lagoon.EnvironmentVariable{Name: "LAGOON_ROUTES", Value: strings.Join(buildValues.Routes, ","), Scope: "runtime"})
	vars = append(vars, lagoon.EnvironmentVariable{Name: "LAGOON_AUTOGENERATED_ROUTES", Value: strings.Join(buildValues.AutogeneratedRoutes, ","), Scope: "runtime"})
	return vars
}

// this creates all the build arguments that an image build can consume
func collectImageBuildArguments(buildValues BuildValues) map[string]string {
	buildArgs := map[string]string{}
	// source any from the environment variables in the project/environment that are `global` or `build` scoped
	for _, envvar := range buildValues.EnvironmentVariables {
		if helpers.Contains([]string{"global", "build"}, envvar.Scope) {
			buildArgs[envvar.Name] = envvar.Value
		}
	}
	// set the standard ones
	if buildValues.IsCI {
		buildArgs["IMAGE_REPO"] = "172.17.0.1:5000/lagoon"
	}
	buildArgs["LAGOON_PROJECT"] = buildValues.Project
	buildArgs["LAGOON_ENVIRONMENT"] = buildValues.Environment
	buildArgs["LAGOON_ENVIRONMENT_TYPE"] = buildValues.EnvironmentType
	buildArgs["LAGOON_BUILD_TYPE"] = buildValues.BuildType
	buildArgs["LAGOON_GIT_SOURCE_REPOSITORY"] = buildValues.SourceRepository
	buildArgs["LAGOON_KUBERNETES"] = buildValues.Kubernetes
	// set any specific build type overrides
	if buildValues.BuildType == "branch" {
		buildArgs["LAGOON_GIT_SHA"] = buildValues.GitSHA
		buildArgs["LAGOON_GIT_BRANCH"] = buildValues.Branch
	}
	if buildValues.BuildType == "pullrequest" {
		buildArgs["LAGOON_GIT_SHA"] = buildValues.GitSHA
		buildArgs["LAGOON_PR_HEAD_BRANCH"] = buildValues.PRHeadBranch
		buildArgs["LAGOON_PR_HEAD_SHA"] = buildValues.PRHeadSHA
		buildArgs["LAGOON_PR_BASE_BRANCH"] = buildValues.PRBaseBranch
		buildArgs["LAGOON_PR_BASE_SHA"] = buildValues.PRBaseSHA
		buildArgs["LAGOON_PR_TITLE"] = buildValues.PRTitle
		buildArgs["LAGOON_PR_NUMBER"] = buildValues.PRNumber
	}
	// Add in random data as per https://github.com/uselagoon/lagoon/issues/2246
	buildArgs["LAGOON_BUILD_NAME"] = buildValues.BuildName
	// and now that we know the temporary image names upfront, they can be passed to all image build steps without
	// needing to wait for the other images to be built
	for _, service := range buildValues.Services {
		if service.ImageBuild != nil && service.ImageBuild.TemporaryImage != "" {
			// add the temporary image name to the payload
			buildArgs[fmt.Sprintf("%s_IMAGE", strings.ToUpper(service.Name))] = service.ImageBuild.TemporaryImage
		}
	}
	// add lagoon image cache build arguments
	for _, icba := range buildValues.ImageCacheBuildArguments {
		buildArgs[fmt.Sprintf("LAGOON_CACHE_%s", icba.Name)] = icba.Image
	}
	buildArgs["LAGOON_SSH_PRIVATE_KEY"] = buildValues.SSHPrivateKey
	return buildArgs
}
