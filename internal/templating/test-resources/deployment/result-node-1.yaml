---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    lagoon.sh/branch: environment-name
    lagoon.sh/version: v2.x.x
  creationTimestamp: null
  labels:
    app.kubernetes.io/instance: node
    app.kubernetes.io/managed-by: build-deploy-tool
    app.kubernetes.io/name: node
    lagoon.sh/buildType: branch
    lagoon.sh/environment: environment-name
    lagoon.sh/environmentType: production
    lagoon.sh/project: example-project
    lagoon.sh/service: node
    lagoon.sh/service-type: node
    lagoon.sh/template: node-0.1.0
  name: node
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: node
      app.kubernetes.io/name: node
  strategy: {}
  template:
    metadata:
      annotations:
        lagoon.sh/branch: environment-name
        lagoon.sh/configMapSha: 32bf1359ac92178c8909f0ef938257b477708aa0d78a5a15ad7c2d7919adf273
        lagoon.sh/version: v2.x.x
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: node
        app.kubernetes.io/managed-by: build-deploy-tool
        app.kubernetes.io/name: node
        lagoon.sh/buildType: branch
        lagoon.sh/environment: environment-name
        lagoon.sh/environmentType: production
        lagoon.sh/project: example-project
        lagoon.sh/service: node
        lagoon.sh/service-type: node
        lagoon.sh/template: node-0.1.0
    spec:
      containers:
      - env:
        - name: LAGOON_GIT_SHA
          value: "0"
        - name: CRONJOBS
        - name: SERVICE_NAME
          value: node
        envFrom:
        - configMapRef:
            name: lagoon-env
        image: harbor.example.com/example-project/environment-name/node@latest
        imagePullPolicy: Always
        livenessProbe:
          initialDelaySeconds: 60
          tcpSocket:
            port: 3000
          timeoutSeconds: 10
        name: node
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        readinessProbe:
          initialDelaySeconds: 1
          tcpSocket:
            port: 3000
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
        securityContext: {}
      enableServiceLinks: false
      imagePullSecrets:
      - name: lagoon-internal-registry-secret
      priorityClassName: lagoon-priority-production
      securityContext:
        fsGroup: 10001
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsUser: 10000
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    lagoon.sh/branch: environment-name
    lagoon.sh/version: v2.x.x
  creationTimestamp: null
  labels:
    app.kubernetes.io/instance: node-persist
    app.kubernetes.io/managed-by: build-deploy-tool
    app.kubernetes.io/name: node-persistent
    lagoon.sh/buildType: branch
    lagoon.sh/environment: environment-name
    lagoon.sh/environmentType: production
    lagoon.sh/project: example-project
    lagoon.sh/service: node-persist
    lagoon.sh/service-type: node-persistent
    lagoon.sh/template: node-persistent-0.1.0
  name: node-persist
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: node-persist
      app.kubernetes.io/name: node-persistent
  strategy: {}
  template:
    metadata:
      annotations:
        lagoon.sh/branch: environment-name
        lagoon.sh/configMapSha: 32bf1359ac92178c8909f0ef938257b477708aa0d78a5a15ad7c2d7919adf273
        lagoon.sh/version: v2.x.x
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: node-persist
        app.kubernetes.io/managed-by: build-deploy-tool
        app.kubernetes.io/name: node-persistent
        lagoon.sh/buildType: branch
        lagoon.sh/environment: environment-name
        lagoon.sh/environmentType: production
        lagoon.sh/project: example-project
        lagoon.sh/service: node-persist
        lagoon.sh/service-type: node-persistent
        lagoon.sh/template: node-persistent-0.1.0
    spec:
      containers:
      - env:
        - name: LAGOON_GIT_SHA
          value: "0"
        - name: CRONJOBS
        - name: SERVICE_NAME
          value: node-persist
        envFrom:
        - configMapRef:
            name: lagoon-env
        image: harbor.example.com/example-project/environment-name/node-persist@latest
        imagePullPolicy: Always
        livenessProbe:
          initialDelaySeconds: 60
          tcpSocket:
            port: 3000
          timeoutSeconds: 10
        name: node
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        readinessProbe:
          initialDelaySeconds: 1
          tcpSocket:
            port: 3000
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
        securityContext: {}
        volumeMounts:
        - mountPath: ""
          name: node-persist
      enableServiceLinks: false
      imagePullSecrets:
      - name: lagoon-internal-registry-secret
      priorityClassName: lagoon-priority-production
      securityContext:
        fsGroup: 10001
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsUser: 10000
      volumes:
      - name: node-persist
        persistentVolumeClaim:
          claimName: node-persist
status: {}
