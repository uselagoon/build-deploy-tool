package cmd

import (
	"fmt"

	"github.com/spf13/cobra"
	generator "github.com/uselagoon/build-deploy-tool/internal/generator"
	"github.com/uselagoon/build-deploy-tool/internal/helpers"
	ingresstemplate "github.com/uselagoon/build-deploy-tool/internal/templating/ingress"
)

var autogenRouteGeneration = &cobra.Command{
	Use:     "autogenerated-ingress",
	Aliases: []string{"autogen-ingress", "autogen", "ai"},
	Short:   "Generate the autogenerated ingress templates for a Lagoon build",
	RunE: func(cmd *cobra.Command, args []string) error {
		generator, err := generatorInput(true)
		if err != nil {
			return err
		}
		return AutogeneratedIngressGeneration(generator)
	},
}

// AutogeneratedIngressGeneration handles generating autogenerated ingress
func AutogeneratedIngressGeneration(g generator.GeneratorInput) error {
	lagoonBuild, err := generator.NewGenerator(
		g,
	)
	if err != nil {
		return err
	}
	savedTemplates := g.SavedTemplatesPath

	// generate the templates
	for _, route := range lagoonBuild.AutogeneratedRoutes.Routes {
		// autogenerated routes use the `servicename` as the name of the ingress resource, use `IngressName` in routev2 to handle this
		if g.Debug {
			fmt.Println(fmt.Sprintf("Templating autogenerated ingress manifest for %s to %s", route.Domain, fmt.Sprintf("%s/%s.yaml", savedTemplates, route.LagoonService)))
		}
		templateYAML, err := ingresstemplate.GenerateIngressTemplate(route, *lagoonBuild.BuildValues)
		if err != nil {
			return fmt.Errorf("couldn't generate template: %v", err)
		}
		helpers.WriteTemplateFile(fmt.Sprintf("%s/%s.yaml", savedTemplates, route.LagoonService), templateYAML)
	}

	return nil
}

func init() {
	templateCmd.AddCommand(autogenRouteGeneration)
}
