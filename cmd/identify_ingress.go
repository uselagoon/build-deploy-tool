package cmd

import (
	"encoding/json"
	"fmt"

	"github.com/spf13/cobra"
	generator "github.com/uselagoon/build-deploy-tool/internal/generator"
)

type ingressIdentifyJSON struct {
	Primary       string   `json:"primary"`
	Secondary     []string `json:"secondary"`
	Autogenerated []string `json:"autogenerated"`
}

var primaryIngressIdentify = &cobra.Command{
	Use:     "primary-ingress",
	Aliases: []string{"pi"},
	Short:   "Identify the primary ingress for a specific environment",
	RunE: func(cmd *cobra.Command, args []string) error {
		generator, err := generatorInput(false)
		if err != nil {
			return err
		}
		primary, _, _, err := IdentifyPrimaryIngress(generator)
		if err != nil {
			return err
		}
		fmt.Println(primary)
		return nil
	},
}

var ingressIdentify = &cobra.Command{
	Use:     "ingress",
	Aliases: []string{"i"},
	Short:   "Identify all ingress for a specific environment",
	RunE: func(cmd *cobra.Command, args []string) error {
		generator, err := generatorInput(false)
		if err != nil {
			return err
		}
		primary, secondary, autogen, err := IdentifyPrimaryIngress(generator)
		if err != nil {
			return err
		}
		ret := ingressIdentifyJSON{
			Primary:       primary,
			Secondary:     secondary,
			Autogenerated: autogen,
		}
		retJSON, _ := json.Marshal(ret)
		fmt.Println(string(retJSON))
		return nil
	},
}

// IdentifyPrimaryIngress .
func IdentifyPrimaryIngress(g generator.GeneratorInput) (string, []string, []string, error) {
	lagoonBuild, err := generator.NewGenerator(
		g,
	)
	if err != nil {
		return "", nil, nil, err
	}

	return lagoonBuild.BuildValues.Route, lagoonBuild.BuildValues.Routes, lagoonBuild.BuildValues.AutogeneratedRoutes, nil
}

var autogenIngressIdentify = &cobra.Command{
	Use:     "autogenerated-ingress",
	Aliases: []string{"ai"},
	Short:   "Identify all autogenerated ingress object names for a specific environment",
	RunE: func(cmd *cobra.Command, args []string) error {
		generator, err := generatorInput(false)
		if err != nil {
			return err
		}
		autogen, err := AutogeneratedIngressIdentification(generator)
		if err != nil {
			return err
		}
		ret := ingressIdentifyJSON{
			Autogenerated: autogen,
		}
		retJSON, _ := json.Marshal(ret)
		fmt.Println(string(retJSON))
		return nil
	},
}

// AutogeneratedIngressIdentification handles identifying autogenerated ingress
func AutogeneratedIngressIdentification(g generator.GeneratorInput) ([]string, error) {
	lagoonBuild, err := generator.NewGenerator(
		g,
	)
	if err != nil {
		return nil, err
	}

	autogenIngress := []string{}
	// generate the templates
	for _, route := range lagoonBuild.AutogeneratedRoutes.Routes {
		autogenIngress = append(autogenIngress, route.LagoonService)
	}

	return autogenIngress, nil
}

func init() {
	identifyCmd.AddCommand(primaryIngressIdentify)
	identifyCmd.AddCommand(ingressIdentify)
	identifyCmd.AddCommand(autogenIngressIdentify)
}
